{"version":3,"sources":["LineChart.js","PairSelector.js","SpotPrice.js","SelectTimeScale.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["require","ReactChartkick","addAdapter","Chart","Charts","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","arr","values","chartData","min","Math","apply","toConsumableArray","max","react_default","a","createElement","className","react_chartkick_esm","data","curve","Component","PairSelector","name","value","currentPair","onChange","event","updatePair","target","pairList","map","pair","index","key","SpotPrice","spotPrice","selectTimeScale","onClick","changeTimeScale","axios","moment","App","scale","setState","chartScale","getChartPricingData","makePairOptions","pairlst","concat","generatePairs","i","topCoins","length","coin","n","fiatCurrency","fiat","push","j","coin2","time","split","FirstSymbol","LastSymbol","get","then","res","pricingData","Data","newChartData","console","log","day","unix","format","close","_this2","price","_this3","getSpotPrice","interval","setInterval","prevProps","prevState","SelectTimeScale","src_PairSelector","src_SpotPrice","LineChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ce8d7c41.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactChartkick, { AreaChart, LineChart, PieChart, BarChart, Timeline } from 'react-chartkick'\nimport Chart from 'chart.js'\nconst axios = require('axios');\n\nReactChartkick.addAdapter(Chart)\n\nclass Charts extends Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n    }\n  }\n  \n  render(){\n    let arr = Object.values(this.props.chartData);\n      let min = Math.min(...arr);\n      let max = Math.max(...arr);\n    return(\n      <div className=\"chart\">\n          <LineChart \n          data={this.props.chartData} \n          min={min}\n          max={max}\n          curve={false} \n          \n          />\n      </div>\n    )\n  }\n}\n\nexport default Charts","import React, { Component } from 'react';\n\nfunction PairSelector(props) {\n  \n  return (\n    <select \n      className=\"pair\" \n      name=\"pair\" \n      value={props.currentPair} \n      onChange={(event) => props.updatePair(event.target.value)}>\n      {props.pairList.map((pair, index) => <option key={index} value={pair}>{pair}</option> )}\n    </select>\n\n  )\n}\n\nexport default PairSelector\n","import React, { Component } from 'react';\n\nclass SpotPrice extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n\n    }  \n  }\n\n  render(){\n    return (\n      <div>\n        {this.props.spotPrice && <h1>{this.props.currentPair} Price: {this.props.spotPrice}</h1>}\n      </div>\n    )\n  }\n}\n\nexport default SpotPrice","import React, { Component } from 'react';\n\n\nfunction selectTimeScale (props) {\n  return (\n    <div className=\"timescale\">\n      <button onClick={(event) => props.changeTimeScale(\"day\")}>Day</button>\n      <button onClick={(event) => props.changeTimeScale(\"hour\")}>Hour</button>\n      <button onClick={(event) => props.changeTimeScale(\"minute\")}>Minute</button>\n    </div>\n  )\n}\n\nexport default selectTimeScale\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Charts  from './LineChart'\nimport PairSelector from './PairSelector'\nimport SpotPrice from './SpotPrice'\nimport SelectTimeScale from './SelectTimeScale'\n\n\nconst axios = require('axios');\nconst moment = require('moment');\nclass App extends Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      pricingData: [],\n      chartData: [],\n      currentPair: \"AUD/BTC\",\n      topCoins: [\"BTC\", \"ETH\", \"XRP\", \"BCH\", \"EOS\"],\n      fiatCurrency: [\"AUD\", \"USD\", \"EUR\", \"NZD\"],\n      pairList: [],\n      spotPrice: null,\n      chartScale: \"day\"\n    }\n  }\n  \n  changeTimeScale = (scale) => {\n    this.setState({chartScale: scale})\n    this.getChartPricingData(scale)\n  }  \n\n  makePairOptions = () => {\n    let pair = this.state.pairlst \n    return `<option value=${pair}>${pair}</option>`\n  }\n\n  generatePairs = () => {\n    for (let i = 0; i < this.state.topCoins.length -1 ; i++) {\n      const coin = this.state.topCoins[i];\n      for (let n = 0; n < this.state.fiatCurrency.length; n++) {\n        const fiat = this.state.fiatCurrency[n];\n        this.state.pairList.push(`${coin}/${fiat}`);\n        this.state.pairList.push(`${fiat}/${coin}`);\n      }\n      for (let j = i + 1; j < this.state.topCoins.length; j++) {\n        const coin2 = this.state.topCoins[j];\n        this.state.pairList.push(`${coin2}/${coin}`);\n        this.state.pairList.push(`${coin}/${coin2}`);\n      }\n    }\n  }\n\n  getSpotPrice() {\n    const url =  \"https://min-api.cryptocompare.com/data/\"\n    let split = this.state.currentPair.split(\"/\")\n    let FirstSymbol = split[0]\n    let LastSymbol = split[1]\n    axios.get(`${url}price?fsym=${FirstSymbol}&tsyms=${LastSymbol}`)\n      .then((res) => {\n        let price = res.data\n        this.setState({spotPrice : price[LastSymbol]})\n      })\n  }\n\n  componentDidMount(){\n    this.generatePairs()\n    this.getChartPricingData(\"day\")\n    this.getSpotPrice()\n    this.interval = setInterval(() => {\n      this.getSpotPrice();\n    }, 60000);\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.currentPair !== this.state.currentPair) {\n      this.getChartPricingData(this.state.chartScale)\n    }\n  }\n\n  getChartPricingData = (time) => {\n    const url =  \"https://min-api.cryptocompare.com/data/\"\n    let split = this.state.currentPair.split(\"/\")\n    let FirstSymbol = split[0]\n    let LastSymbol = split[1]\n    axios.get(`${url}histo${time}?fsym=${FirstSymbol}&tsym=${LastSymbol}`)\n    .then((res) => {\n      let pricingData = res.data.Data\n      let newChartData = {}\n      console.log(pricingData);      \n      pricingData.map((day, index) => {\n        newChartData[moment.unix(day.time).format(\"YYYY-MM-DD HH:mm a\")] = day.close\n      })\n      this.setState({pricingData, chartData: newChartData})\n    })\n  }\n\n  updatePair = (pair) => {\n    this.setState({currentPair : pair})\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SelectTimeScale\n          changeTimeScale={this.changeTimeScale}\n        />\n        <PairSelector \n          updatePair={this.updatePair} \n          pairList={this.state.pairList} \n          currentPair={this.state.currentPair}\n        />\n        <SpotPrice\n          currentPair={this.state.currentPair}\n          spotPrice={this.state.spotPrice}\n        />\n        <Charts\n          chartData={this.state.chartData}\n          getChartPricingData={this.getChartPricingData}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}